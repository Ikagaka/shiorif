{"version":3,"sources":["shiorif.js","lib/shiorif.js"],"names":["exports","window","require","ShioriJK","ShioriTransaction","EventEmitter","Shiorif","_EventEmitter","shiori","auto_convert_request_version","arguments","length","undefined","call","this","_this","_shiori","_request_parser","Shiori","Request","Parser","_response_parser","Response","dirpath","emit","load","then","status","_this2","StatusError","_request","convert","transaction","request","Message","parse","use_request","to","name","default_headers","headers","header","response","_this3","method","id","request_line","version","Array","referencesFromArray","request3","unload","_this4","_auto_convert_request_version","_default_headers","headersArray","forEach","index","_Error","apply","Error"],"mappings":"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","file":"lib/shiorif.js","sourcesContent":[null,"/* for browser */\nif (typeof require !== 'undefined') {\n  var ShioriJK = require('shiorijk');\n  var ShioriTransaction = require('shiori_transaction').ShioriTransaction;\n  var EventEmitter = require('eventemitter3');\n}\n\n/**\n * The convenient SHIORI Shared Library Interface\n */\nexport class Shiorif extends EventEmitter {\n  /**\n   * @param {Shiori} shiori - The instance of SHIORI Shared Library Interface\n   * @param {string} auto_convert_request_version - requests will be converted to this version\n   * @return {Shiorif} this\n   */\n  constructor(shiori, auto_convert_request_version = '2.6') {\n    super();\n    this._shiori = shiori;\n    this.auto_convert_request_version = auto_convert_request_version;\n    this._request_parser = new ShioriJK.Shiori.Request.Parser();\n    this._response_parser = new ShioriJK.Shiori.Response.Parser();\n  }\n\n  /**\n   * shiori\n   * @return {Shiori} shiori\n   */\n  get shiori() {\n    return this._shiori;\n  }\n\n  /**\n   * requests will be converted to this version\n   * @return {string} version\n   */\n  get auto_convert_request_version() {\n    return this._auto_convert_request_version;\n  }\n\n  /**\n   * requests will be converted to this version\n   * @param {string} version - version\n   * @return {string} version\n   */\n  set auto_convert_request_version(version) {\n    this._auto_convert_request_version = version;\n  }\n\n  /**\n   * default headers\n   * @return {Object<string, string>} headers\n   */\n  get default_headers() {\n    return this._default_headers;\n  }\n\n  /**\n   * default headers\n   * @param {Object<string, string>} headers - headers\n   * @return {Object<string, string>} headers\n   */\n  set default_headers(headers) {\n    this._default_headers = headers;\n  }\n\n  /**\n   * SHIORI/2.x/3.x load()\n   *\n   * this emits load(dirpath), loaded(status) events.\n   * @param {string} dirpath - The directory that SHIORI Shared Library is placed. The end character of dirpath must be the path separator (/ or \\\\).\n   * @returns {Promise<number>} The status code\n   */\n  load(dirpath) {\n    this.emit('load', dirpath);\n    return this.shiori.load(dirpath).then((status) => {\n      this.emit('loaded', status);\n      if (!status) throw new Shiorif.StatusError();\n      return status;\n    });\n  }\n\n  /**\n   * SHIORI/2.x/3.x request()\n   *\n   * this emits request(request), response(response) events.\n   * @param {string|ShioriJK.Message.Request} request - The SHIORI Request\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request(request, convert = true) {\n    const transaction = new ShioriTransaction();\n    transaction.request = request instanceof ShioriJK.Message.Request\n      ? request : this._request_parser.parse(request);\n    this.emit('request', transaction);\n    const use_request = convert\n      ? transaction.request.to(this.auto_convert_request_version)\n      : transaction.request;\n    for (const name in this.default_headers) {\n      if (use_request.headers.header[name] != null) {\n        use_request.headers.header[name] = this.default_headers[name];\n      }\n    }\n    return this.shiori.request(use_request)\n      .then((response) => {\n        transaction.response = this._response_parser.parse(response);\n        this.emit('response', transaction);\n        return transaction;\n      });\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by SHIORI/3.x request value\n   * @param {string} method - method\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request3(method, id, headers, convert = true) {\n    const request = new ShioriJK.Message.Request({\n      request_line: {\n        version: '3.0',\n        method: method,\n      },\n      headers: headers instanceof Array ? Shiorif.referencesFromArray(headers) : headers,\n    });\n    return this.request(request, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by SHIORI/2.x request value\n   * @param {string} method - method\n   * @param {string} id - id\n   * @param {Object<string, string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request2(method, id, headers, convert = true) {\n    const request = new ShioriJK.Message.Request({\n      request_line: {\n        version: '2.6',\n        method: method,\n      },\n      headers: headers,\n    });\n    return this.request(request, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by GET SHIORI/3.x request value\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  get3(id, headers, convert = true) {\n    return this.request3('GET', id, headers, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by NOTIFY SHIORI/3.x request value\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  notify3(id, headers, convert = true) {\n    return this.request3('NOTIFY', id, headers, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x unload()\n   *\n   * this emits unload(), unloaded(status) events.\n   * @returns {Promise<number>} The status code\n   */\n  unload() {\n    this.emit('unload');\n    return this.shiori.unload().then((status) => {\n      this.emit('unloaded', status);\n      if (!status) throw new Shiorif.StatusError();\n      return status;\n    });\n  }\n\n  /**\n   * convert array values to Reference* hash\n   * @param {Array<string>} headersArray header array values\n   * @returns {Object<string, string>} The headers hash value\n   */\n  static referencesFromArray(headersArray) {\n    const headers = {};\n    headersArray.forEach((header, index) => {\n      if (header != null) headers[`Reference${index}`] = header;\n    });\n    return headers;\n  }\n}\n\nShiorif.StatusError = class StatusError extends Error {\n};\n"],"sourceRoot":"/source/"}