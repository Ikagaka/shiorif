{"version":3,"sources":["lib/shiorif.js"],"names":[],"mappings":"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","file":"lib/shiorif.js","sourcesContent":["import ShioriJK from 'shiorijk';\nimport {ShioriTransaction} from 'shiori_transaction';\nimport {EventEmitter} from 'events';\n\n/**\n * The convenient SHIORI Shared Library Interface\n */\nexport class Shiorif extends EventEmitter {\n  /**\n   * @param {Shiori} shiori - The instance of SHIORI Shared Library Interface\n   * @param {string} auto_convert_request_version - requests will be converted to this version\n   * @param {boolean} auto_adjust_to_response_charset - request charset header will be set to previous response charset\n   * @return {Shiorif} this\n   */\n  constructor(shiori, auto_convert_request_version = '2.6', auto_adjust_to_response_charset = false) {\n    super();\n    this._shiori = shiori;\n    this.auto_convert_request_version = auto_convert_request_version;\n    this.auto_adjust_to_response_charset = auto_adjust_to_response_charset;\n    this._request_parser = new ShioriJK.Shiori.Request.Parser();\n    this._response_parser = new ShioriJK.Shiori.Response.Parser();\n  }\n\n  /**\n   * shiori\n   * @return {Shiori} shiori\n   */\n  get shiori() {\n    return this._shiori;\n  }\n\n  /**\n   * requests will be converted to this version\n   * @return {string} version\n   */\n  get auto_convert_request_version() {\n    return this._auto_convert_request_version;\n  }\n\n  /**\n   * requests will be converted to this version\n   * @param {string} version - version\n   * @return {string} version\n   */\n  set auto_convert_request_version(version) {\n    this._auto_convert_request_version = version;\n  }\n\n  /**\n   * request charset header will be set to previous response charset\n   * @return {boolean} enabled or not\n   */\n  get auto_adjust_to_response_charset() {\n    return this._auto_adjust_to_response_charset;\n  }\n\n  /**\n   * request charset header will be set to previous response charset\n   * @param {boolean} enabled or not\n   * @return {boolean} enabled or not\n   */\n  set auto_adjust_to_response_charset(enabled) {\n    this._auto_adjust_to_response_charset = enabled;\n  }\n\n  /**\n   * default headers\n   * @return {Object<string, string>} headers\n   */\n  get default_headers() {\n    return this._default_headers;\n  }\n\n  /**\n   * default headers\n   * @param {Object<string, string>} headers - headers\n   * @return {Object<string, string>} headers\n   */\n  set default_headers(headers) {\n    this._default_headers = headers;\n  }\n\n  /**\n   * SHIORI/2.x/3.x load()\n   *\n   * this emits load(dirpath), loaded(status) events.\n   * @param {string} dirpath - The directory that SHIORI Shared Library is placed. The end character of dirpath must be the path separator (/ or \\\\).\n   * @returns {Promise<number>} The status code\n   */\n  load(dirpath) {\n    this.emit('load', dirpath);\n    return this.shiori.load(dirpath).then((status) => {\n      this.emit('loaded', status);\n      if (!status) throw new Shiorif.StatusError();\n      return status;\n    });\n  }\n\n  /**\n   * SHIORI/2.x/3.x request()\n   *\n   * this emits request(request), response(response) events.\n   * @param {string|ShioriJK.Message.Request} request - The SHIORI Request\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request(request, convert = true) {\n    const transaction = new ShioriTransaction();\n    transaction.request = request instanceof ShioriJK.Message.Request\n      ? request : this._request_parser.parse(request);\n    this.emit('request', transaction);\n    const use_request = convert\n      ? transaction.request.to(this.auto_convert_request_version)\n      : transaction.request;\n    for (const name in this.default_headers) {\n      if (use_request.headers.header[name] == null) {\n        use_request.headers.header[name] = this.default_headers[name];\n      }\n    }\n    if (this.auto_adjust_to_response_charset && this._last_response_charset) {\n      use_request.headers.header.Charset = this._last_response_charset;\n    }\n    return this.shiori.request(use_request.toString())\n      .then((response) => {\n        transaction.response = this._response_parser.parse(response);\n        this._last_response_charset = transaction.response.headers.header.Charset;\n        this.emit('response', transaction);\n        return transaction;\n      });\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by SHIORI/3.x request value\n   * @param {string} method - method\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request3(method, id, headers, convert = true) {\n    const request = new ShioriJK.Message.Request({\n      request_line: {\n        version: '3.0',\n        method: method,\n      },\n      headers: Object.assign({ID: id}, headers instanceof Array ? Shiorif.referencesFromArray(headers) : headers),\n    });\n    return this.request(request, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by SHIORI/2.x request value\n   * @param {string} method - method\n   * @param {Object<string, string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  request2(method, headers, convert = true) {\n    const request = new ShioriJK.Message.Request({\n      request_line: {\n        version: '2.6',\n        method: method,\n      },\n      headers: headers,\n    });\n    return this.request(request, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by GET SHIORI/3.x request value\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  get3(id, headers, convert = true) {\n    return this.request3('GET', id, headers, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x request() by NOTIFY SHIORI/3.x request value\n   * @param {string} id - id\n   * @param {Object<string, string> | Array<string>} headers - headers\n   * @param {boolean} convert - enable auto request version convert\n   * @returns {Promise<ShioriTransaction>} The SHIORI request transaction\n   */\n  notify3(id, headers, convert = true) {\n    return this.request3('NOTIFY', id, headers, convert);\n  }\n\n  /**\n   * SHIORI/2.x/3.x unload()\n   *\n   * this emits unload(), unloaded(status) events.\n   * @returns {Promise<number>} The status code\n   */\n  unload() {\n    this.emit('unload');\n    return this.shiori.unload().then((status) => {\n      this.emit('unloaded', status);\n      if (!status) throw new Shiorif.StatusError();\n      return status;\n    });\n  }\n\n  /**\n   * convert array values to Reference* hash\n   * @param {Array<string>} headersArray header array values\n   * @returns {Object<string, string>} The headers hash value\n   */\n  static referencesFromArray(headersArray) {\n    const headers = {};\n    headersArray.forEach((header, index) => {\n      if (header != null) headers[`Reference${index}`] = header;\n    });\n    return headers;\n  }\n}\n\nShiorif.StatusError = class StatusError extends Error {\n};\n"],"sourceRoot":"/source/"}